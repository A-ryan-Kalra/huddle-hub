generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Profile {
  id        String    @id @default(uuid())
  userId    String    @unique
  name      String
  imageUrl  String
  email     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  channels  Channel[]
  members   Member[]
  servers   Server[]
}

model Server {
  id         String    @id @default(uuid())
  name       String
  imageUrl   String
  inviteCode String   @unique
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  profileId  String
  channels   Channel[]
  channelOnMembers ChannelOnMember[]
  members    Member[]
  profile    Profile   @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

model Channel {
  id         String            @id @default(uuid())
  name       String
  profileId  String
  type       ChannelType       @default(TEXT)
  serverId String
  visibility ChannelVisibility @default(PUBLIC)
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
  profile    Profile           @relation(fields: [profileId], references: [id], onDelete: Cascade)
  server     Server @relation(fields: [serverId],references: [id],onDelete: Cascade)
  members    ChannelOnMember[]
  messages   Message[]
}

model Member {
  id                    String         @id @default(uuid())
  role                  MemberRole     @default(GUEST)
  profileId             String
  serverId              String
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt
  conversationInitiated Conversation[] @relation("conversationInitiater")
  concersationReceived  Conversation[] @relation("conversationReceiver")

  profile               Profile        @relation(fields: [profileId], references: [id], onDelete: Cascade)
  server                Server         @relation(fields: [serverId], references: [id], onDelete: Cascade)
  channels              ChannelOnMember[]
  messages              Message[]
  directMessages        DirectMessage[]
 
  @@index([serverId])
}

model Message {
  id        String   @id @default(uuid())
  content   String?
  fileUrl   String?
  deleted   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  memberId  String
  channelId String
  channel   Channel  @relation(fields: [channelId], references: [id], onDelete: Cascade)
  member    Member   @relation(fields: [memberId], references: [id], onDelete: Cascade)

  @@index([channelId])
  @@index([memberId])
}

model Conversation {
  id                      String          @id @default(uuid())
  conversationInitiaterId String
  conversationReceiverId  String
  conversationInitiator   Member          @relation("conversationInitiater", fields: [conversationInitiaterId], references: [id], onDelete: Cascade)
  conversationReceiver    Member          @relation("conversationReceiver", fields: [conversationReceiverId], references: [id], onDelete: Cascade)
  directMessages          DirectMessage[]

  @@unique([conversationInitiaterId, conversationReceiverId])
  @@index([conversationInitiaterId])
  @@index([conversationReceiverId])
}

model DirectMessage {
  id             String       @id @default(uuid())
  content        String
  fileUrl        String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  deleted        Boolean      @default(false)

  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  memberId       String
  member         Member  @relation(fields: [memberId],references: [id],onDelete: Cascade)
}

model ChannelOnMember{
  memberId String
  member                Member        @relation(fields: [memberId],references: [id],onDelete: Cascade)
  channelId             String
  channel               Channel       @relation(fields: [channelId], references: [id], onDelete: Cascade)
  serverId              String
  server                Server        @relation(fields: [serverId], references: [id], onDelete: Cascade)
  createdAt      DateTime     @default(now())
 
  @@id([memberId,channelId,serverId])
}

enum ChannelType {
  TEXT
  AUDIO
  VIDEO
}

enum ChannelVisibility {
  PUBLIC
  PRIVATE
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}
