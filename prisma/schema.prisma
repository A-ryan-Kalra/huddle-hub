generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model profile {
  id        String    @id @default(uuid())
  userId    String    @unique
  name      String
  imageUrl  String
  email     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  channels  channel[]
  members   member[]
  servers   server[]
}

model server {
  id         String    @id @default(uuid())
  name       String
  imageUrl   String
  inviteCode String   @unique
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  profileId  String
  channels   channel[]
  channelOnMembers channelOnMember[]
  members    member[]
  profile    profile   @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

model channel {
  id         String            @id @default(uuid())
  name       String
  profileId  String
  type       channelType       @default(TEXT)
  serverId String
  visibility channelVisibility @default(PUBLIC)
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
  profile    profile           @relation(fields: [profileId], references: [id], onDelete: Cascade)
  server     server @relation(fields: [serverId],references: [id],onDelete: Cascade)
  members    channelOnMember[]
  messages   message[]


}

model member {
  id                    String         @id @default(uuid())
  role                  memberRole     @default(GUEST)
  profileId             String
  serverId              String
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt
  isInvitedComplete     Boolean?        @default(false)
  conversationInitiated conversation[] @relation("conversationInitiater")
  concersationReceived  conversation[] @relation("conversationReceiver")
  subscription          Json?

  profile               profile        @relation(fields: [profileId], references: [id], onDelete: Cascade)
  server                server         @relation(fields: [serverId], references: [id], onDelete: Cascade)
  channels              channelOnMember[]
  messages              message[]
  directMessages        directMessage[]
  threads               threads[]
  notificationSent       notification[] 
  notificationRecipient notificationRecipient[]

  @@index([serverId,profileId])
}

model message {
  id        String   @id @default(uuid())
  content   String?
  fileUrl   String?
  deleted   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  memberId  String
  channelId String
  channel   channel  @relation(fields: [channelId], references: [id], onDelete: Cascade)
  member    member   @relation(fields: [memberId], references: [id], onDelete: Cascade)
  threads              threads[]
  replyToMessageId     String? 
  replyToMessage       message? @relation("MessageReplies",fields: [replyToMessageId],references: [id],onDelete: Cascade)
  repliedMessages      message[] @relation("MessageReplies")

  @@index([channelId])
  @@index([memberId])
  @@index([replyToMessageId])
}

 
model conversation {
  id                      String          @id @default(uuid())
  conversationInitiaterId String
  conversationReceiverId  String
  conversationInitiator   member          @relation("conversationInitiater", fields: [conversationInitiaterId], references: [id], onDelete: Cascade)
  conversationReceiver    member          @relation("conversationReceiver", fields: [conversationReceiverId], references: [id], onDelete: Cascade)
  directMessages          directMessage[]

  @@unique([conversationInitiaterId, conversationReceiverId])
  @@index([conversationInitiaterId])
  @@index([conversationReceiverId])
}

model directMessage {
  id             String       @id @default(uuid())
  content        String
  fileUrl        String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  deleted        Boolean      @default(false)
  replyToMessageId     String? 
  replyToMessage       directMessage? @relation("MessageReplies",fields: [replyToMessageId],references: [id])
  repliedMessages      directMessage[] @relation("MessageReplies")

  conversationId String
  conversation   conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  memberId       String
  member         member  @relation(fields: [memberId],references: [id],onDelete: Cascade)

  threads               threads[]
}

model threads {
  id        String   @id @default(uuid())
  content   String?
  fileUrl   String?
  deleted   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  messageOwnerId String

  directMessageId  String?
  directMessage    directMessage?   @relation(fields: [directMessageId], references: [id], onDelete: Cascade)

  messageId  String?
  message    message?   @relation(fields: [messageId], references: [id], onDelete: Cascade)

  memberId  String
  member    member   @relation(fields: [memberId], references: [id], onDelete: Cascade)

  @@index([directMessageId,messageId,memberId])
}

model channelOnMember{
  memberId String
  member                member        @relation(fields: [memberId],references: [id])
  channelId             String
  channel               channel       @relation(fields: [channelId], references: [id] )
  serverId              String
  server                server        @relation(fields: [serverId], references: [id] )
  createdAt      DateTime     @default(now())
 
  @@id([memberId,channelId,serverId])
}

model notification{
  id  String @id @default(uuid())
  message String
  type notificationType @default(MESSAGE)
  typeId String // could be messageId or replyId
  content String
  channel_direct_messageId String
  threadId String?
  threadMessage String?
  threadMessageOwnerId String?
  senderId String
  communicationType communicationType @default(CHANNEL)
  notificationSent member @relation(fields: [senderId],references: [id],onDelete: Cascade)
  createdAt DateTime @default(now())

  recipients notificationRecipient[]
} 

model notificationRecipient {
  id String @id @default(uuid())
  isRead Boolean @default(false)
  notificationId String
  notification notification @relation(fields: [notificationId],references: [id],onDelete: Cascade)
  memberId String
  member member @relation(fields: [memberId],references: [id],onDelete: Cascade)

  createdAt DateTime @default(now())

}

enum notificationType {
  MESSAGE
  DIRECT_MESSAGE
  REPLY
  INVITE
}
enum communicationType {
  CHANNEL
  DIRECT_MESSAGE
}

enum channelType {
  TEXT
  AUDIO
  VIDEO
}

enum channelVisibility {
  PUBLIC
  PRIVATE
}

enum memberRole {
  ADMIN
  MODERATOR
  GUEST
}
